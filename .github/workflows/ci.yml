name: aklapper CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

env:
  # GCP Project Id
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  # GCP Project Region
  REGION: ${{ secrets.GCP_REGION }}
  # GCP Artifact Registry Repo name
  GAR_REPO: ${{ secrets.GAR_REPO_NAME }}
  #NX Cloud Auth Token
  NX_CLOUD_TOKEN: ${{ secrets.NX_CLOUD_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      #Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install PNPM
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Setup Node js
      - uses: actions/setup-node@v4
        with:
          node-version: '23'

      # Cache Dependencies for all jobs
      - name: Cache dependencies - pnpm-store, node_modules, poetry, pip, .venv
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Install Node / Js dependencies
      - name: Install Nodejs Dependencies
        run: pnpm install --frozen-lockfile

      # Set Python for wdg-agents
      - name: Set Python Version for wdg-agents
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.8

      # Install Poetry for Python venv managment
      # Add Poetry Export Plugin
      # Add Poetry Shell Plugin
      - name: Install Poetry w/ Exports/Shell Plugins
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - run: |
          poetry self add poetry-plugin-export ;
          poetry self add poetry-plugin-shell

      # Generate Prisma Client For CRUD-Api
      - name: Generate Prisma Client for CRUD-Api
        run: pnpm generate
        env:
          NODE_ENV: production
          DB_URL_PROD: ${{ secrets.DB_URL_PROD }}

  lint:
    needs: ['setup']
    runs-on: ubuntu-latest
    steps:
      #Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install PNPM
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Setup Node Js
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies - pnpm-store, node_modules, poetry, pip, .venv
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Install Poetry for Python venv managment
      # Add Poetry Export Plugin
      # Add Poetry Shell Plugin
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - run: |
          poetry self add poetry-plugin-export ;
          poetry self add poetry-plugin-shell

      # Lint all projects
      - name: Lint all projects
        run: pnpx nx affected -t=lint --verbose

  test:
    needs: ['setup']
    runs-on: ubuntu-latest
    steps:
      #Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install PNPM
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Setup Node Js
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies - pnpm-store, node_modules, poetry, pip, .venv
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Install Poetry for Python venv managment
      # Add Poetry Export Plugin
      # Add Poetry Shell Plugin
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - run: |
          poetry self add poetry-plugin-export ;
          poetry self add poetry-plugin-shell

      # Install WDG-AGENTS for test execution
      - name: Install WDG-AGENTS for test execution
        run: pnpx nx install wdg-agents

      # Generate Prisma Client For CRUD-Api
      - name: Generate Prisma Client for CRUD-Api
        run: pnpm generate
        env:
          NODE_ENV: test
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}

      # Test all projects
      - name: Test all projects
        env:
          NODE_ENV: test
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}
        run: pnpx nx affected -t=test --verbose

  build_and_typecheck:
    needs: ['lint', 'test']
    runs-on: ubuntu-latest
    steps:
      #Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install PNPM
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Setup Node Js
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies - pnpm-store, node_modules, poetry, pip, .venv
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Install Poetry for Python venv managment
      # Add Poetry Export Plugin
      # Add Poetry Shell Plugin
      - name: Install Poetry w/ Exports/Shell Plugins
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - run: |
          poetry self add poetry-plugin-export ;
          poetry self add poetry-plugin-shell

      # Build all projects
      - name: Build all Projects
        env:
          NODE_ENV: production
        run: pnpx nx affected -t=build --verbose

      # Typecheck all projects
      - name: Typecheck all Projects
        env:
          NODE_ENV: production
        run: pnpx nx affected -t=typecheck --verbose

  # Build Docker Image & Push to GCP Artifact Registry
  prepare-apis:
    needs: ['build_and_typecheck']
    runs-on: ubuntu-latest
    steps:
      #Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install PNPM
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Install Dependencies
      - name: Install Portfolio Dependencies for Deploy to GCP Cloud Run
        run: pnpm install --frozen-lockfile

      # Generate Prisma Client For CRUD-Api
      - name: Generate Prisma Client for CRUD-Api
        run: pnpm generate
        env:
          NODE_ENV: production
          DB_URL_PROD: ${{ secrets.DB_URL_PROD }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Auth with GCP Service Key Credentials
      - uses: google-github-actions/auth@v2
        name: Authenticate to Google Cloud
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      # Configure Docker with GCP
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Build all API's Docker Images for GCP Cloud Run Deployment
      - name: Build all API Docker Images for GCP Artifact Registery
        env:
          DB_URL_PROD: ${{ secrets.DB_URL_PROD }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REGION: ${{ env.REGION }}
          GAR_REPO: ${{ env.GAR_REPO }}
          NODE_ENV: production
        run: |
          pnpx nx affected -t docker-build

      # Push all API's Docker Images for GCP Cloud Run Deployment
      - name: Push all API Docker Images to GCP Artifact Registery
        run: |
          pnpx nx affected -t docker-push --verbose

  deploy-apis:
    needs: ['prepare-apis']
    runs-on: ubuntu-latest
    steps:
      #Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install PNPM
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Setup Node Js
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies - pnpm-store, node_modules, poetry, pip, .venv
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Authenticate With GCP
      - uses: 'google-github-actions/auth@v2'
        name: Authenticate with GCP
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      # Deploy all APIs to Cloud Run
      - name: Deploy APIs to Cloud Run
        run: pnpx nx affected -t deploy-cloud-run --verbose

  deploy-portfolio:
    needs: ['build_and_typecheck']
    runs-on: ubuntu-latest
    steps:
      # Use last git commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Setup Node Js
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies - pnpm-store, node_modules, poetry, pip, .venv
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Authenticate With GCP
      - uses: 'google-github-actions/auth@v2'
        name: Authenticate with GCP
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      # Deploy to Portfolio to App Engine
      - name: Deploy Portfolio to App Engine
        env:
          NODE_ENV: production
          VITE_OAUTH_CLIENT_ID: ${{ secrets.VITE_OAUTH_CLIENT_ID }}
          VITE_CRUD_API_URL: ${{ secrets.VITE_CRUD_API_URL }}
          VITE_GAMES_API_URL: ${{ secrets.VITE_GAMES_API_URL }}
          VITE_PORTFOLIO_API_URL: ${{ secrets.VITE_PORTFOLIO_API_URL }}
          VITE_VERTEX_API_URL: ${{ secrets.VITE_VERTEX_API_URL }}
          VITE_GAMES_WS_URL: ${{ secrets.VITE_GAMES_WS_URL }}
          VITE_VERTEX_WS_URL: ${{ secrets.VITE_VERTEX_WS_URL }}1
        run: pnpx nx affected -t deploy-app-engine --verbose

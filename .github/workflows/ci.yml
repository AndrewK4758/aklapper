name: My Portfolio CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Install Poetry for wdg-agents
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Setup Python Version for wdg-agents
      - name: Setup Python Version for wdg-agents
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.8

      # Install Python app wdg-agents to pass lint and test
      - name: Install wdg-agents
        run: pnpx nx install wdg-agents

      # Lint all projects
      - name: Lint all projects
        run: pnpx nx affected -t lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      # Create prisma client for unit tests
      - name: Generate Prisma Client
        run: pnpm generate

      # Typecheck all projects
      - name: Typecheck all projects
        run: pnpx nx affected -t typecheck

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Install Poetry for wdg-agents
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Setup Python Version for wdg-agents
      - name: Setup Python Version for wdg-agents
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.8

      # Install Python app wdg-agents to pass lint and test
      - name: Install wdg-agents
        run: pnpx nx install wdg-agents

      # Generate Prisma Client
      - name: Generate Prisma Client
        run: pnpm generate

      # Build Docker Container for API Unit Tests
      - name: Build Docker Container
        run: docker build -f ./Dockerfile.db.testing . -t ci-test

      # Start Docker Container for API Unit Tests
      - name: Start Docker Container
        run: docker compose -f ./docker-compose.yaml up ci-test -d

      # Test all projects
      - name: Test all projects
        env:
          NODE_ENV: testing
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}
        run: pnpx nx affected -t test

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Install Poetry for wdg-agents
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Setup Python Version for wdg-agents
      - name: Setup Python Version for wdg-agents
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.8

      # Install Python app wdg-agents to pass lint and test
      - name: Install wdg-agents
        run: pnpx nx install wdg-agents

      #Build all projects
      - name: Build all Projects
        run: pnpx nx affected -t build

  clean-up:
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      # Install Docker to stop test container
      - uses: actions/checkout@v4
      - name: Install Docker
        run: sudo apt-get install -y docker.io docker-compose

      # Stop Docker Test Container
      - name: Stop Docker Test Container
        run: docker compose -f ./docker-compose.yaml down -v

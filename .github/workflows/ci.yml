name: aklapper CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: read

env:
  PYTHON_VERSION: '3.13.3'
  PNPM_VERSION: '10'
  NODE_VERSION: '24.x'
  # GCP Region
  REGION: ${{ secrets.GCP_REGION }}
  # GCP Artifact Registry Repo name
  GAR_REPO: ${{ secrets.GAR_REPO_NAME }}
  #NX Cloud Auth Token
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  # CloudSQL URL
  DB_URL_PROD: ${{ secrets.DB_URL_PROD }}
  # GCP Project ID
  PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  cache-and-install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Setup Python and cache Poetry dependencies
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install Poetry
        uses: snok/install-poetry@v1

  lint:
    needs: ['cache-and-install']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Setup Python and cache Poetry dependencies
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Python Dependencies
        run: pnpx nx install wdg-agents

      - uses: nrwl/nx-set-shas@v4

      - name: Install WDG-AGENTS for lint execution
        run: pnpx nx install wdg-agents

      - name: Lint all projects
        run: pnpx nx affected -t=lint --verbose

  test:
    needs: ['lint']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Setup Python and cache Poetry dependencies
      # - name: Set up Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}
      #     cache: 'poetry'

      # - name: Install Poetry
      #   uses: snok/install-poetry@v1

      # - name: Install Python Dependencies
      #   run: pnpx nx install wdg-agents

      - uses: nrwl/nx-set-shas@v4

      - name: Generate Prisma Client for CRUD-Api
        run: pnpm generate-chinook-client
        env:
          NODE_ENV: test
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}

      - name: Test all projects
        env:
          NODE_ENV: test
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}
        run: pnpx nx affected -t=test --exclude=wdg-agents,games-lobby,file-uploader --verbose

  build_and_typecheck:
    needs: ['lint', 'test']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Setup Python and cache Poetry dependencies
      # - name: Set up Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}
      #     cache: 'poetry'

      # - name: Install Poetry
      #   uses: snok/install-poetry@v1

      - name: Generate Prisma Client for CRUD-Api
        run: pnpm generate-chinook-client
        env:
          NODE_ENV: production
          DB_URL_PROD: ${{ secrets.DB_URL_PROD }}

      - uses: nrwl/nx-set-shas@v4

      - name: Build all Affected Projects
        env:
          NODE_ENV: production
        run: pnpx nx affected -t=build --exclude=wdg-agents,games-lobby,file-uploader --verbose

      - name: Typecheck all Affected Projects
        env:
          NODE_ENV: production
        run: pnpx nx affected -t=typecheck --exclude=wdg-agents,games-lobby,file-uploader --verbose

  deploy-apis:
    needs: ['build_and_typecheck']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Deploy APIs to Cloud Run
        run: pnpx nx affected -t deploy-cloud-run --verbose --exclude=portfolio

  deploy-portfolio:
    needs: ['build_and_typecheck']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      - name: Deploy Portfolio to App Engine
        env:
          NODE_ENV: production
          VITE_OAUTH_CLIENT_ID: ${{ secrets.VITE_OAUTH_CLIENT_ID }}
          VITE_CRUD_API_URL: ${{ secrets.VITE_CRUD_API_URL }}
          VITE_GAMES_API_URL: ${{ secrets.VITE_GAMES_API_URL }}
          VITE_PORTFOLIO_API_URL: ${{ secrets.VITE_PORTFOLIO_API_URL }}
          VITE_VERTEX_API_URL: ${{ secrets.VITE_VERTEX_API_URL }}
          VITE_GAMES_WS_URL: ${{ secrets.VITE_GAMES_WS_URL }}
          VITE_VERTEX_WS_URL: ${{ secrets.VITE_VERTEX_WS_URL }}
        run: pnpx nx affected -t deploy-app-engine --verbose

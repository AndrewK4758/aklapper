name: aklapper CI

on:
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: read

env:
  PYTHON_VERSION: 3.13.3
  PNPM_VERSION: 10
  NODE_VERSION: 24.x

  PRISMA_CLIENT_OUTPUT_PATH: ${{ secrets.PRISMA_CLIENT_OUTPUT_PATH }}
  DB_URL_PROD: ${{ secrets.DB_URL_PROD }}

  REGION: ${{ secrets.GCP_REGION }}
  PROJECT_LOCATION: ${{ secrets.GCP_REGION }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}

jobs:
  cache-and-install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        #   filter: tree:0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

  lint:
    needs: ['cache-and-install']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        #   filter: tree:0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Lint all projects
        run: pnpx nx run-many -t lint --all --exclude wdg-agents games-lobby go-file-uploader go_utils --verbose

  test:
    needs: ['cache-and-install']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        #   filter: tree:0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Generate Prisma Client for CRUD-Api
        run: pnpm generate-chinook-client
        env:
          NODE_ENV: test
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}

      - name: Test all projects
        env:
          NODE_ENV: test
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}
        run: pnpx nx run-many -t test --all --exclude wdg-agents games-lobby go-file-uploader go_utils --verbose

  build-and-typecheck:
    needs: ['cache-and-install']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        #   filter: tree:0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Clients
        run: |
          pnpm generate-chinook-client
          pnpm generate-games-client
        env:
          NODE_ENV: production

      - uses: nrwl/nx-set-shas@v4

      - name: Build all Projects
        env:
          NODE_ENV: production
        run: pnpx nx run-many -t=build --all --exclude wdg-agents games-lobby go-file-uploader go_utils --verbose

      - name: Typecheck all Affected Projects
        env:
          NODE_ENV: production
        run: pnpx nx run-many -t typecheck --all --exclude wdg-agents games-lobby file-uploader go_utils --verbose

  deploy-apis:
    needs: ['lint', 'test', 'build-and-typecheck']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        #   filter: tree:0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Deploy APIs to Cloud Run
        run: pnpx nx affected -t deploy-cloud-run --verbose

  deploy-portfolio:
    needs: ['lint', 'test', 'build-and-typecheck']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        #   filter: tree:0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      - name: Deploy Portfolio to App Engine
        env:
          NODE_ENV: production
          VITE_OAUTH_CLIENT_ID: ${{ secrets.VITE_OAUTH_CLIENT_ID }}
          VITE_CRUD_API_URL: ${{ secrets.VITE_CRUD_API_URL }}
          VITE_GAMES_API_URL: ${{ secrets.VITE_GAMES_API_URL }}
          VITE_PORTFOLIO_API_URL: ${{ secrets.VITE_PORTFOLIO_API_URL }}
          VITE_VERTEX_API_URL: ${{ secrets.VITE_VERTEX_API_URL }}
          VITE_GAMES_WS_URL: ${{ secrets.VITE_GAMES_WS_URL }}
          VITE_GAMES_WS_PATH: ${{ secrets.VITE_GAMES_WS_PATH }}
          VITE_GAMES_WS_GAMEPLAY_NAMESPACE: ${{ secrets.VITE_GAMES_WS_GAMEPLAY_NAMESPACE }}
          VITE_VERTEX_WS_URL: ${{ secrets.VITE_VERTEX_WS_URL }}

        run: pnpx nx affected -t deploy-app-engine --verbose

name: aklapper CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

env:
  # GCP Project Id
  PROJECT_ID: games-424800
  # GCP Project Region
  REGION: us-central1
  # GCP Artifact Registry Repo name
  GAR_REPO: portfolio
  #NX Cloud Auth Token
  NX_CLOUD_TOKEN: ${{ secrets.NX_CLOUD_TOKEN }}

# https://iam.googleapis.com/projects/120904484903/locations/global/workloadIdentityPools/aklapper-pool/providers/portfolio-ci

# assertion.sub

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install pnpm Dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Setup Python Version for wdg-agents
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.8

      - name: Install wdg-agents
        run: pnpx nx install wdg-agents

      - name: Generate Prisma Client
        run: pnpm generate

  lint:
    needs: ['setup']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Lint all projects
      - name: Lint all projects
        run: pnpx nx affected -t lint

  test:
    needs: ['setup']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Build Docker Container for API Unit Tests
      - name: Build Docker Container
        run: docker build -f ./Dockerfile.db.testing . -t ci-test

      # Start Docker Container for API Unit Tests
      - name: Start Docker Container
        run: docker compose -f ./docker-compose.yaml up ci-test -d

      # Test all projects
      - name: Test all projects
        env:
          NODE_ENV: testing
          DB_URL_TEST: ${{ secrets.DB_URL_TEST }}
        run: pnpx nx affected -t test

      # Stop Docker Container
      - name: Stop Docker Container
        if: always()
        run: docker compose -f ./docker-compose.yaml down

  build_and_typecheck:
    needs: ['lint', 'test']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Use cached dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
            ~/.pnpm-store
            node_modules
            .venv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      #Build all projects
      - name: Build all Projects
        env:
          NODE_ENV: production
        run: pnpx nx affected -t build

      #Typecheck all projects
      - name: Typecheck all Projects
        run: pnpx nx affected -t typecheck

  # Deploy to CD Pipleline with GCP
  deploy:
    needs: ['build_and_typecheck']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      # Install Dependencies
      - name: Install Portfolio Dependencies for Deploy to Cloud Build
        run: pnpm install --frozen-lockfile

      # Generate Prisma Client
      - name: Generate Prisma Client
        run: pnpm generate

      # Add Nx Cloud Build Cache
      - uses: nrwl/nx-set-shas@v4

      # Auth with GCP Service Key Credentials
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS_JSON }}

      # Configure Docker with GCP
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Build all API's Docker Images for GCP Cloud Run Deployment
      - name: Build all API Docker Images & Push all API Docker Images to GCP Artifact Registery
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          REGION: ${{ env.REGION }}
          GAR_REPO: ${{ env.GAR_REPO }}
        run: |
          pnpx nx docker-build crud-api  
          pnpx nx docker-push crud-api 
          pnpx nx docker-build games-api 
          pnpx nx docker-push games-api 
          pnpx nx docker-build portfolio-api 
          pnpx nx docker-push portfolio-api 
          pnpx nx docker-build vertex-api
          pnpx nx docker-push vertex-api

      # Deploy all APIs to Cloud Run
      - name: Deploy APIs to Cloud Run
        run: |
          gcloud run deploy crud-api --image us-central1-docker.pkg.dev/games-424800/portfolio/crud-api:latest --max-instances 1 --port 4000 --region ${{env.REGION}} --platform managed --allow-unauthenticated --no-traffic

          gcloud run deploy games-api --image us-central1-docker.pkg.dev/games-424800/portfolio/games-api:latest --region ${{env.REGION}} --platform managed --max-instances 1 --port 3000 --allow-unauthenticated --no-traffic

          gcloud run deploy portfolio-api --image us-central1-docker.pkg.dev/games-424800/portfolio/portfolio-api:latest --region ${{env.REGION}} --platform managed --max-instances 1 --port 4758 --allow-unauthenticated --no-traffic

          gcloud run deploy vertex-api --image us-central1-docker.pkg.dev/games-424800/portfolio/vertex-api:latest --region ${{env.REGION}} --platform managed --max-instances 1 --port 5000 --allow-unauthenticated --no-traffic

      # Migrate traffic to new revisions if health checks pass
      - name: Migrate traffic to new revisions
        run: |
          gcloud run services update-traffic crud-api --to-latest --region us-central1
          gcloud run services update-traffic games-api --to-latest --region us-central1
          gcloud run services update-traffic portfolio-api --to-latest --region us-central1
          gcloud run services update-traffic vertex-api --to-latest --region us-central1

      # Deploy to Portfolio to App Engine
      - name: Deploy Portfolio to App Engine
        run: pnpx nx deploy portfolio

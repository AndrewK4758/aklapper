export const title = 'Games';

export const body = `Yes, these are simple board games. When you take a board game, break it down into its individual component parts, find the similarities and generalizations between all board games, and isolate what makes each game unique, you can take this simple concept and generate a group of objects that you can use to easily build any board style game using Object Oriented Programming concepts. These games show object composition & interaction for the front and back end business logic, REST API, and websockets. The business logic is built upon a few fundamental classes: a Space class and an Avatar class compose the 2 base classes for the board and gameplay, with the Space class containing an array of Avatars currently occupied in the Space and each Avatar knowing which space it occupies with a location property. Next comes the Board and Player classes, Each Player has 1 Avatar and each Board is composed of many Spaces. By separating the board from each space, when the board is built and consumes each space, all that is necessary for each game, is to pass in the rule or set of rules to build the board out of spaces. The Board class returns the game board as a doubly linked list. The Player holds all states for the current person playing the game including the selected Avatar. The Player can have one Avatar for a selected game. A specific game instance lives in a generic Game class along with other information pertinent to the gameplay. 

The GameBuilder is a builder pattern used to set a game instance generator with necessary metadata, actions (as Command objects), and return a BuiltGame. All BuiltGame objects are stored in an array to be consumed by the API that serves the business logic results to the client. The actions are built with dynamic endpoints that build a Context object that is passed through a Chain Of Responsibility specific to each game. By following this pattern, any board style game can be built with no repeating of code, no need to build endpoints specific to each game, and the ability to use everything already produced for future projects, and can be deployed easily over any JavaScript server runtime.`;
